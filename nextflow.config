manifest {
  mainScript = 'main.nf'
  nextflowVersion = '>=20.10.0'
}

// Global default params, used in configs
params {
    runtime_opts = ''
    lsf_opts = ''
    vmf = '-B' // volume mounting flag - default it to singularity flag
    singularity_cache_dir = getEnvValue("HOME",
                                        getEnvValue("TMPDIR", "/tmp")) + "/.singularity_cache"
    singularity_user = getEnvValue("USER", "")
    scratch_mount = ''
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {

    standard {
        docker.enabled = false
        singularity.enabled = true
    }

    localDocker {
        docker.enabled = true
        singularity.enabled = false
        params.vmf = '-v'
    }

    janeliaLSF {
        process {
            executor = 'lsf'

            clusterOptions = params.lsf_opts

            withLabel: use_gpu {
                queue = 'gpu_tesla'
                clusterOptions = '-gpu "num=1" ' + params.lsf_opts
            }

            withLabel: use_local {
                executor = 'local'
            }
        }
        params.scratch_mount = params.vmf + ' /scratch/' + params.singularity_user
        docker.enabled = false
        singularity.enabled = true
    }

    tower {
        process {
            withLabel: withGPU {
                containerOptions = ""
            }
        }
        docker.enabled = true
        singularity.enabled = false
        params.singularity_user = "ec2_user"
    }

    tower_gpu {
        process {
            withLabel: withGPU {
                accelerator = 1
                containerOptions = "--runtime nvidia"
            }
        }
        docker.enabled = true
        singularity.enabled = false
        params.singularity_user = "ec2_user"
    }
}

docker {
    runOptions = "${params.runtime_opts}"
    temp = "auto"
}

singularity {
    autoMounts = true
    cacheDir = "${params.singularity_cache_dir}"
    runOptions = "--nv ${params.scratch_mount} --env USER=${params.singularity_user} ${params.runtime_opts}"
}

// Borrowed from nf-virontus/nextflow.config
// Try to get a system environment variable value with some key. If the key
// doesn't exist, then return a default value
def getEnvValue(envKey, defaultValue = null) {
  envMap = new HashMap(System.getenv())
  if (envMap.containsKey(envKey)) {
    envMap[envKey]
  } else {
    defaultValue
  }
}
